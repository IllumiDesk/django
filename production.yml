version: "3.5"

x-django: &django
  build:
    context: .
    dockerfile: ./compose/production/django/Dockerfile
  image: illumidesk_docker_production_django
  env_file:
    - ./.envs/.production/.django
    - ./.envs/.production/.postgres

services:
  reverse-proxy:
    image: traefik:v2.2
    command: --api.insecure=true --providers.docker=true --providers.docker.watch=true
    ports:
      - "5000:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  webapp:
    <<: *django
    depends_on:
      - postgres
      - redis
    command: /start
    ports:
      - "5000"
    labels:
      - "traefik.http.routers.webapp.rule=PathPrefix(`/`)"

  celeryworker:
    <<: *django
    image: illumidesk_docker_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: illumidesk_docker_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: illumidesk_docker_production_flower
    command: /start-flower
    ports:
      - "5555"

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: illumidesk_docker_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  redis:
    image: redis:5.0

  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_data_backups:/backups

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}