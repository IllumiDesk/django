version: '2'
services:
  api:
    build: .
    command: /srv/env/bin/gunicorn --bind 0.0.0.0:80 --reload --workers 1 --log-level=DEBUG --error-logfile=- --access-logfile=- appdj.wsgi
    volumes:
      - .:/srv/app
      - /workspaces:/workspaces
    env_file: env
    depends_on:
      - db
      - cache
      - broker
      - search
    labels:
      - "traefik.enable=true"
      - "traefik.backend=api"
      - "traefik.frontend.rule=PathPrefix:/"
  celery:
    build: .
    command: /srv/env/bin/celery -A appdj worker -l info
    volumes:
      - .:/srv/app
      - /workspaces:/workspaces
    env_file: env
    depends_on:
      - db
      - cache
      - broker
      - search
    entrypoint: ''
  beat:
    build: .
    command: /srv/env/bin/celery -A appdj beat -l debug
    volumes:
      - .:/srv/app
      - /workspaces:/workspaces
    env_file: env
    depends_on:
      - db
      - cache
      - broker
      - search
    entrypoint: ''
  db:
    image: postgres:9.6-alpine
    ports:
      - "5432:5432"
  broker:
    image: rabbitmq:alpine
    ports:
      - "5672:5672"
  search:
    image: elasticsearch:5-alpine
    ports:
      - "9200:9200"
  cache:
    image: redis:alpine
    ports:
      - "6379:6379"
  server:
    image: 3blades/traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5000:80"
      - "8081:8080"
    depends_on:
      - api
      - events
      - nginx
  events:
    image: 3blades/docker-events
    env_file: env
    labels:
      - "traefik.enable=true"
      - "traefik.backend=events"
      - "traefik.status.frontend.rule=Path:/{version}/{namespace}/projects/{project}/servers/{server}/status/"
      - "traefik.logs.frontend.rule=Path:/{version}/{namespace}/projects/{project}/servers/{server}/logs/"
    ports:
      - "8000:8000"
  nginx:
    image: 3blades/nginx
    command: /nginx/sbin/nginx -p '' -g 'daemon off;'
    labels:
      - "traefik.enable=true"
      - "traefik.backend=nginx"
      - "traefik.nginx.frontend.rule=PathPrefix:/media"
    volumes:
      - /workspaces:/workspaces
  sentry:
    image: sentry
    depends_on:
      - cache
      - db
    ports:
      - 9000:9000
    environment:
      SENTRY_SECRET_KEY: 'ZiGTnxn6Om4N8mTZdiGvKQaXp1eo8u2T'
      SENTRY_POSTGRES_HOST: db
      SENTRY_DB_NAME: sentry
      SENTRY_DB_USER: postgres
      SENTRY_REDIS_HOST: cache
  sentry-worker:
    image: sentry
    command: "sentry run worker"
    depends_on:
      - cache
      - db
    environment:
      SENTRY_SECRET_KEY: 'ZiGTnxn6Om4N8mTZdiGvKQaXp1eo8u2T'
      SENTRY_POSTGRES_HOST: db
      SENTRY_DB_NAME: sentry
      SENTRY_DB_USER: postgres
      SENTRY_REDIS_HOST: cache
  sentry-cron:
    image: sentry
    command: "sentry run cron"
    depends_on:
      - cache
      - db
    environment:
      SENTRY_SECRET_KEY: 'ZiGTnxn6Om4N8mTZdiGvKQaXp1eo8u2T'
      SENTRY_POSTGRES_HOST: db
      SENTRY_DB_NAME: sentry
      SENTRY_DB_USER: postgres
      SENTRY_REDIS_HOST: cache

networks:
  default:
    external:
      name: tbs-net
